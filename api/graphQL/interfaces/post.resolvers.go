package interfaces

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.47

import (
	"context"
	"net/http"

	"github.com/AnxVit/ozon_1/api/graphQL/generated"
	"github.com/AnxVit/ozon_1/api/graphQL/models"
	"github.com/AnxVit/ozon_1/internal/logger"
)

// CreatePost is the resolver for the CreatePost field.
func (r *mutationResolver) CreatePost(ctx context.Context, post models.PostInput) (*models.PostResponse, error) {
	if post.Title == "" {
		return &models.PostResponse{
			Message: "The title is required",
			Status:  http.StatusBadRequest,
		}, nil
	}
	var commented bool
	if post.Commented == nil {
		commented = false
	} else {
		commented = *post.Commented
	}
	obj := &models.Post{
		Author:    post.Author,
		Title:     post.Title,
		Content:   post.Content,
		Commented: commented,
	}

	id, err := r.HabrService.CreatePost(context.Background(), obj)
	if err != nil {
		logger.Get().Error("ERROR: ", err)
		return &models.PostResponse{
			Message: "Failed to create post",
			Status:  http.StatusInternalServerError,
		}, nil
	}

	return &models.PostResponse{
		Message: "Successfully created post",
		Status:  http.StatusCreated,
		ID:      &id,
	}, nil
}

// GetPost is the resolver for the GetPost field.
func (r *queryResolver) GetPost(ctx context.Context, id string, limit *int, offset *int) (*models.PostResponse, error) {
	post, err := r.HabrService.GetPostByID(context.Background(), id, limit, offset)
	if err != nil {
		logger.Get().Error("ERROR: ", err)
		return &models.PostResponse{
			Message: "Failed to get post by id",
			Status:  http.StatusInternalServerError,
		}, nil
	}
	return &models.PostResponse{
		Message: "Successfully retrived post",
		Status:  http.StatusOK,
		Data:    post,
	}, nil
}

// GetAllPost is the resolver for the GetAllPost field.
func (r *queryResolver) GetAllPost(ctx context.Context) (*models.PostResponse, error) {
	posts, err := r.HabrService.GetAllPost(context.Background())
	if err != nil {
		logger.Get().Error("ERROR: ", err)
		return &models.PostResponse{
			Message: "Failed to get all posts",
			Status:  http.StatusInternalServerError,
		}, nil
	}
	return &models.PostResponse{
		Message:  "Successfully retrived all posts",
		Status:   http.StatusOK,
		DataList: posts,
	}, nil
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
